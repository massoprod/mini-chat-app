{"version":3,"sources":["components/ChatController/style.module.css","components/Message/style.module.css","components/ChatRoom/style.module.css","store/store.js","constants.js","components/AddToChatForm/index.js","components/Message/index.js","components/ChatRoom/index.js","components/ChatController/index.js","components/ChatController/constants.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","createContext","user","room","setUser","setRoom","AppProvider","setState","state","Provider","value","this","props","children","Component","AppConsumer","Consumer","CHATKIT_INSTANCE_LOCATOR","DEFAULT_CHAT_USER","ENDPOINT","AddToChatForm","title","className","style","width","htmlFor","onChange","onNicknameChange","nickname","type","id","placeholder","onChatroomChange","chatroom","onClick","onSubmit","buttonLabel","marginTop","onBackClick","classes","require","Message","isMine","me","marginBottom","author","createdAt","moment","utc","local","format","message","mineMessage","ChatRoom","lastRef","useRef","length","loaderWrapper","name","color","chatList","messages","map","senderId","currentUserId","key","text","ref","sendWrapper","onNewMessageChange","newMessageValue","marginLeft","e","onAddSubmit","setTimeout","current","scrollIntoView","behavior","ChatController","chatAction","chatRoom","userName","isLoading","isChatReady","loadedRooms","roomId","handleChangeChatAction","handleChangeUserName","target","handleChangeChatRoom","handleUpdateMessage","addSupportStaffToRoom","appData","addUserToRoom","userId","connectToRoom","subscribeToRoom","messageLimit","hooks","onMessage","then","currentRoom","createRoom","private","catch","console","error","handleSubmitNewChat","trim","alert","axios","post","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","connect","currentUser","handleSubmitJoinChat","roomName","selectedRoom","find","handleSubmitMessage","event","preventDefault","sendMessage","get","data","rooms","bodyComponent","bind","btnsWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,YAAc,6B,2ECAhCD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,YAAc,2BAA2B,OAAS,sBAAsB,GAAK,kBAAkB,UAAY,2B,kBCA9JD,EAAOC,QAAU,CAAC,cAAgB,6BAA6B,MAAQ,qBAAqB,YAAc,2BAA2B,oBAAsB,mCAAmC,SAAW,0B,yHCCnMC,EAAaC,wBAAc,CAC/BC,KAAM,KACNC,KAAM,KACNC,QAAS,aACTC,QAAS,eAGEC,EAAb,2MACEF,QAAU,SAAAF,GACR,EAAKK,SAAS,CAAEL,UAFpB,EAKEG,QAAU,SAAAF,GACR,EAAKI,SAAS,CAAEJ,UANpB,EASEK,MAAQ,CACNN,KAAM,KACNC,KAAM,KACNC,QAAS,EAAKA,QACdC,QAAS,EAAKA,SAblB,wEAiBI,OACE,kBAACL,EAAWS,SAAZ,CAAqBC,MAAOC,KAAKH,OAC9BG,KAAKC,MAAMC,cAnBpB,GAAiCC,aAyBpBC,EAAcf,EAAWgB,S,0EClCzBC,EAA2B,8CAE3BC,EAAoB,UACpBC,EAAW,4C,OCuDTC,EAvDO,SAAC,GAAD,IAAKR,EAAL,yBACpB,oCACE,4BAAKA,EAAMS,OACX,yBAAKC,UAAU,aAAaC,MAAO,CAACC,MAAO,MACzC,2BAAOC,QAAQ,YAAf,YACA,2BACEC,SAAUd,EAAMe,iBAChBjB,MAAOE,EAAMgB,SACbC,KAAK,OACLP,UAAU,eACVQ,GAAG,WACHC,YAAY,cAGhB,yBAAKT,UAAU,aAAaC,MAAO,CAACC,MAAO,MACzC,2BAAOC,QAAQ,YAAf,kBACA,2BACEC,SAAUd,EAAMoB,iBAChBtB,MAAOE,EAAMqB,SACbJ,KAAK,OACLP,UAAU,eACVQ,GAAG,WACHC,YAAY,oBAGhB,4BACEF,KAAK,SACLP,UAAU,kBACVC,MAAO,CAACC,MAAO,KACfU,QAAStB,EAAMuB,UAEdvB,EAAMwB,aAET,4BACEP,KAAK,SACLP,UAAU,kBACVC,MAAO,CAACC,MAAO,IAAKa,UAAW,IAC/BH,QAAStB,EAAM0B,aAJjB,U,iDC/BEC,EAAUC,EAAQ,IAuBTC,EArBC,SAAC,GAAD,IAAK7B,EAAL,yBACd,oCACE,yBAAKU,UAAWV,EAAM8B,OAASnB,IAAMoB,GAAK,KAAMpB,MAAO,CAACqB,aAAc,IACpE,0BAAMtB,UAAWC,IAAMsB,QAASjC,EAAMiC,OAAtC,KACA,0BAAMvB,UAAWC,IAAMuB,WAAaC,IAAOC,IAAIpC,EAAMkC,WAAWG,QAAQC,OAAO,sBAEjF,yBACE5B,UAAWiB,EAAQhB,IAAM4B,QAASvC,EAAM8B,QAAUnB,IAAM6B,cAEvDxC,EAAMuC,WC8DEE,EAxEE,SAAC,GAAgB,IAAZzC,EAAW,kBACzB0C,EAAUC,iBAAO,MACvB,GAA2B,IAAvB3C,EAAMS,MAAMmC,OACd,OACE,yBAAKlC,UAAWC,IAAMkC,eACpB,kBAAC,IAAD,CAASC,KAAK,qBAAqBC,MAAM,aAc/C,OACE,yBAAKrC,UAAU,gCACb,yBAAKA,UAAU,eACb,0BAAMA,UAAWC,IAAMF,OAAQT,EAAMS,QAEvC,yBAAKC,UAAU,aACb,yBAAKA,UAAWC,IAAMqC,UACnBhD,EAAMiD,SAASC,KAAI,SAAAX,GAClB,IAAMT,EAASS,EAAQY,WAAanD,EAAMoD,cAE1C,OACE,kBAAC,EAAD,CACEC,IAAKd,EAAQrB,GACbY,OAAQA,EACRS,QAASA,EAAQe,KACjBrB,OAAQM,EAAQY,SAChBjB,UAAWK,EAAQL,eAIzB,0BAAMqB,IAAKb,MAGf,yBAAKhC,UAAU,eACb,yBAAKA,UAAWC,IAAM6C,aACpB,2BACErC,YAAY,uBACZT,UAAU,eACVI,SAAUd,EAAMyD,mBAChB3D,MAAOE,EAAM0D,kBAEf,4BACEzC,KAAK,SACLP,UAAU,kBACVC,MAAO,CAACgD,WAAY,IACpBrC,QA5CK,SAACsC,GACd5D,EAAM6D,YAAYD,GACF,OAAZlB,GACFoB,YAAW,WACTpB,EAAQqB,QAAQC,eAAe,CAAEC,SAAU,aAC1C,OAmCC,cC9CWC,E,2MAEnBtE,MAAQ,CACNuE,WAAY,KACZC,SAAU,GACVC,SAAU,GACVC,WAAW,EACXrB,SAAU,GACVsB,aAAa,EACbhC,QAAS,GACTiC,YAAa,GACbC,OAAQ,M,EA2BVC,uBAAyB,SAAAP,GACvB,EAAKxE,SAAS,CAACwE,gB,EAGjBQ,qBAAuB,SAAAf,GACrB,EAAKjE,SAAS,CAAC0E,SAAUT,EAAEgB,OAAO9E,S,EAGpC+E,qBAAuB,SAAAjB,GACrB,EAAKjE,SAAS,CAACyE,SAAUR,EAAEgB,OAAO9E,S,EAGpCgF,oBAAsB,SAAAlB,GACpB,EAAKjE,SAAS,CAAC4C,QAASqB,EAAEgB,OAAO9E,S,EAGnCiF,sBAAwB,WAAO,IACtBC,EAAW,EAAKhF,MAAhBgF,QAEP,OAAOA,EAAQ1F,KAAK2F,cAAc,CAChCC,OAAQ5E,EACRmE,OAAQO,EAAQzF,KAAK2B,M,EAIzBiE,cAAgB,SAACjE,GAAQ,IACf8D,EAAY,EAAKhF,MAAjBgF,QAER,OAAOA,EAAQ1F,KACZ8F,gBAAgB,CACfX,OAAO,GAAD,OAAKvD,GACXmE,aAAc,IACdC,MAAO,CACLC,UAAW,SAAAhD,GACT,EAAK5C,SAAS,CACZsD,SAAS,GAAD,mBAAM,EAAKrD,MAAMqD,UAAjB,CAA2BV,UAK1CiD,MAAK,SAAAC,GACJT,EAAQvF,QAAQgG,O,EAItBC,WAAa,WACO,EAAK1F,MAAhBgF,QAEC1F,KACLoG,WAAW,CACV5C,KAAM,EAAKlD,MAAMwE,SACjBuB,SAAS,IAEVH,MAAK,SAAAjG,GAAI,OAAI,EAAK4F,cAAc5F,EAAK2B,OACrCsE,MAAK,kBAAM,EAAKT,2BAChBa,MAAMC,QAAQC,Q,EAGnBC,oBAAsB,WACpB,EAAKpG,SAAS,CAAC2E,WAAW,IADA,IAEnBD,EAAY,EAAKzE,MAAjByE,SAEU,OAAbA,GAAyC,KAApBA,EAAS2B,OAChCC,MAAM,kBAENC,IACGC,KADH,UACW5F,EADX,UAC6B,CAAE2E,OAAQb,IACpCmB,MAAK,WACJ,IAAMY,EAAgB,IAAIC,IAAQC,cAAc,CAC9CC,IAAI,GAAD,OAAKhG,EAAL,mBASL,OANoB,IAAI8F,IAAQG,YAAY,CAC1CC,gBAAiBpG,EACjB6E,OAAQb,EACR+B,kBAGiBM,UAAUlB,MAAK,SAAAmB,GAChC,EAAK3G,MAAMgF,QAAQxF,QAAQmH,GAC3B,EAAKhH,SAAS,CAAC2E,WAAW,EAAOC,aAAa,IAC5C,kBAAM,EAAKmB,sBAIhBE,MAAMC,QAAQC,Q,EAIrBc,qBAAuB,WACrB,EAAKjH,SAAS,CAAC2E,WAAW,IADC,IAEpBD,EAAY,EAAKzE,MAAjByE,SAEP6B,IACCC,KADD,UACS5F,EADT,UAC2B,CAAE2E,OAAQb,IACpCmB,MAAK,WACJ,IAAMY,EAAgB,IAAIC,IAAQC,cAAc,CAC9CC,IAAI,GAAD,OAAKhG,EAAL,mBASL,OANoB,IAAI8F,IAAQG,YAAY,CAC1CC,gBAAiBpG,EACjB6E,OAAQb,EACR+B,kBAICM,UACAlB,MAAK,SAAAmB,GACJ,EAAK3G,MAAMgF,QAAQxF,QAAQmH,GAC3B,EAAKhH,SACH,CACE2E,WAAW,EAAOC,aAAa,IAEjC,WACE,IAAMsC,EAAW,EAAKjH,MAAMwE,SAAS4B,OAC/Bc,EAAe,EAAKlH,MAAM4E,YAAYuC,MAAK,SAAAxH,GAAI,OAAIA,EAAKuD,OAAS+D,KAEvE,GAA4B,qBAAjBC,EAGT,OAFAb,MAAM,2BACN,EAAKtG,SAAS,CAAC4E,aAAa,IAI9B,EAAKY,cAAc2B,EAAa5F,aAKzC0E,MAAMC,QAAQC,Q,EAGjBkB,oBAAsB,SAACC,GACrBA,EAAMC,iBADyB,IAEvB3E,EAAY,EAAK3C,MAAjB2C,QACDyC,EAAW,EAAKhF,MAAhBgF,QAEgB,KAAnBzC,EAAQyD,SAEZhB,EAAQ1F,KAAK6H,YAAY,CACvB7D,KAAMf,EACNkC,OAAO,GAAD,OAAKO,EAAQzF,KAAK2B,MAG1B,EAAKvB,SAAS,CACZ4C,QAAS,O,mFAzKQ,IAAD,OAClBxC,KAAKJ,SAAS,CAAC2E,WAAW,IAC1B4B,IACCkB,IADD,UACQ7G,EADR,UAC0B,CAAE2E,OAAQ,YACnCM,MAAK,WACJ,IAAMY,EAAgB,IAAIC,IAAQC,cAAc,CAC9CC,IAAI,GAAD,OAAKhG,EAAL,mBASL,OANoB,IAAI8F,IAAQG,YAAY,CAC1CC,gBAAiBpG,EACjB6E,OAAQ5E,EACR8F,kBAICM,UACAlB,MAAK,SAAA6B,GACJ,EAAK1H,SAAS,CAAC6E,YAAa6C,EAAKC,MAAOhD,WAAW,UAGxDsB,MAAMC,QAAQC,S,+BAwJP,IAAD,EAC6E/F,KAAKH,MAAlFuE,EADA,EACAA,WAAYG,EADZ,EACYA,UAAWF,EADvB,EACuBA,SAAUnB,EADjC,EACiCA,SAAUV,EAD3C,EAC2CA,QAASgC,EADpD,EACoDA,YAAaF,EADjE,EACiEA,SACjEW,EAAWjF,KAAKC,MAAhBgF,QAEHuC,EAAgB,KA+BpB,OA7BEA,EADEjD,EACc,kBAAC,IAAD,CAASxB,KAAK,qBAAqBC,MAAM,YAEtC,OAAfoB,EAEA,oCACE,4BAAQlD,KAAK,SAASP,UAAU,kBAAkBC,MAAO,CAACC,MAAO,KAAMU,QAASvB,KAAK2E,uBAAuB8C,KAAKzH,KC/M/F,ID+MlB,aAGA,4BAAQkB,KAAK,SAASP,UAAU,eAAeC,MAAO,CAACC,MAAO,KAAMU,QAASvB,KAAK2E,uBAAuB8C,KAAKzH,KCnN7F,IDmNjB,oBAOF,kBAAC,EAAD,CACE2B,YAAa3B,KAAK2E,uBAAuB8C,KAAKzH,KAAM,MACpDqB,iBAAkBrB,KAAK8E,qBACvB9D,iBAAkBhB,KAAK4E,qBACvBtD,SAAU+C,EACVpD,SAAUqD,EACV5D,MChOiB,IDgOV0D,EAA+B,kBAAoB,qBAC1D5C,SCjOiB,IDiOP4C,EAA+BpE,KAAKgG,oBAAsBhG,KAAK6G,qBACzEpF,YClOiB,IDkOJ2C,EAA+B,aAAY,SAM5DI,EAEA,kBAAC,EAAD,CACE9D,MAAwB,OAAjBuE,EAAQzF,KAAgByF,EAAQzF,KAAKuD,KAAO,GACnDG,SAAUA,EACVG,cAAe4B,EAAQ1F,KAAK4B,GAC5BwC,gBAAiBnB,EACjBsB,YAAa9D,KAAKiH,oBAClBvD,mBAAoB1D,KAAK+E,sBAM7B,yBAAKpE,UAAWC,IAAM8G,aACnBF,O,GA7OmCrH,aEI7BwH,EAVH,kBACV,yBAAKhH,UAAU,aACb,kBAACP,EAAD,MACG,SAAAL,GAAK,OACJ,kBAAC,EAAD,CAAgBkF,QAASlF,SCIb6H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAO,mBANI,kBAChB,kBAAC,EAAD,KACI,kBAAC,EAAD,SAIQ,MAAiBC,SAASC,eAAe,SDoHnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.324a2ab0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnsWrapper\":\"style_btnsWrapper__kO5fY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"style_message__ozSTK\",\"mineMessage\":\"style_mineMessage__2-SOA\",\"author\":\"style_author__1EyPV\",\"me\":\"style_me__1Z_j-\",\"createdAt\":\"style_createdAt__jt8Vx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderWrapper\":\"style_loaderWrapper__3q7sh\",\"title\":\"style_title__1XSp6\",\"sendWrapper\":\"style_sendWrapper__1VX9N\",\"messageInputWrapper\":\"style_messageInputWrapper__30Sgk\",\"chatList\":\"style_chatList__4HRbi\"};","import React, { createContext, Component } from 'react';\n\nconst AppContext = createContext({\n  user: null,\n  room: null,\n  setUser: () => {},\n  setRoom: () => {},\n});\n\nexport class AppProvider extends Component {\n  setUser = user => {\n    this.setState({ user });\n  };\n\n  setRoom = room => {\n    this.setState({ room })\n  };\n\n  state = {\n    user: null,\n    room: null,\n    setUser: this.setUser,\n    setRoom: this.setRoom,\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer;","export const CHATKIT_INSTANCE_LOCATOR = \"v1:us1:f0ecceaa-4992-4706-813f-8237028def31\";\nexport const CHATKIT_SECRET_KEY = \"c5c289b7-1bc8-4571-9da7-20c5094e98c5:mQiRKGCQ2+EUTsOoVbDFcJJ5Ln0SzFPjzGMohgfCQII=\";\nexport const DEFAULT_CHAT_USER = 'support'; \nexport const ENDPOINT = \"https://masso-mini-chat-app.herokuapp.com\"","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddToChatForm = ({...props}) => (\n  <>\n    <h4>{props.title}</h4>\n    <div className=\"form-group\" style={{width: 350}}>\n      <label htmlFor=\"nickname\">Nickname</label>\n      <input\n        onChange={props.onNicknameChange}\n        value={props.nickname}\n        type=\"text\"\n        className=\"form-control\"\n        id=\"nickname\"\n        placeholder=\"nickname\"\n      />\n    </div>\n    <div className=\"form-group\" style={{width: 350}}>\n      <label htmlFor=\"chatroom\">Chat room name</label>\n      <input\n        onChange={props.onChatroomChange}\n        value={props.chatroom}\n        type=\"text\"\n        className=\"form-control\"\n        id=\"chatroom\"\n        placeholder=\"chat room name\"\n      />\n    </div>\n    <button\n      type=\"button\"\n      className=\"btn btn-success\"\n      style={{width: 350}}\n      onClick={props.onSubmit}\n    >\n      {props.buttonLabel}\n    </button>\n    <button\n      type=\"button\"\n      className=\"btn btn-primary\"\n      style={{width: 200, marginTop: 30}}\n      onClick={props.onBackClick}\n    >\n      BACK\n    </button>\n  </>\n);\n\nAddToChatForm.propTypes = {\n  onBackClick: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChatroomChange: PropTypes.func.isRequired,\n  onNicknameChange: PropTypes.func.isRequired,\n  chatroom: PropTypes.string.isRequired,\n  nickname: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  buttonLabel: PropTypes.string.isRequired,\n};\n\nexport default AddToChatForm;","import React from 'react';\nimport style from './style.module.css';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nconst classes = require('react-style-classes');\n\nconst Message = ({...props}) => (\n  <>\n    <div className={props.isMine ? style.me : null} style={{marginBottom: 5}}>\n      <span className={style.author}>{props.author},</span>\n      <span className={style.createdAt}>{(moment.utc(props.createdAt).local().format('DD.MM.YYYY h:m A'))}</span>\n    </div>\n    <div\n      className={classes(style.message, props.isMine && style.mineMessage)}\n    >\n      {props.message}\n    </div>\n  </>\n);\n\nMessage.propTypes = {\n  isMine: PropTypes.bool.isRequired,\n  message: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n};\n\nexport default Message;","import React, {useRef} from 'react';\nimport style from './style.module.css';\nimport PropTypes from 'prop-types';\nimport Message from '../Message';\nimport Spinner from \"react-spinkit\";\n\nconst ChatRoom = ({...props}) => {\n  const lastRef = useRef(null);\n  if (props.title.length === 0) {\n    return (\n      <div className={style.loaderWrapper}>\n        <Spinner name=\"ball-triangle-path\" color=\"#f0f0f0\" />\n      </div>\n    );\n  }\n\n  const submit = (e) => {\n    props.onAddSubmit(e);\n    if (lastRef !== null) {\n      setTimeout(() => {\n        lastRef.current.scrollIntoView({ behavior: 'smooth' });\n      }, 150);\n    }\n  };\n\n  return (\n    <div className=\"card text-white bg-dark mt-3\">\n      <div className=\"card-header\">\n        <span className={style.title}>{props.title}</span>\n      </div>\n      <div className=\"card-body\">\n        <div className={style.chatList}>\n          {props.messages.map(message => {\n            const isMine = message.senderId === props.currentUserId;\n\n            return (\n              <Message\n                key={message.id}\n                isMine={isMine}\n                message={message.text}\n                author={message.senderId}\n                createdAt={message.createdAt}\n              />\n            )\n          })}\n          <span ref={lastRef} />\n        </div>\n      </div>\n      <div className=\"card-footer\">\n        <div className={style.sendWrapper}>\n          <input\n            placeholder=\"type your message...\"\n            className=\"form-control\"\n            onChange={props.onNewMessageChange}\n            value={props.newMessageValue}\n          />\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            style={{marginLeft: 10}}\n            onClick={submit}\n          >\n            SUBMIT \n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nChatRoom.propTypes = {\n  messages: PropTypes.array.isRequired,\n  currentUserId: PropTypes.string.isRequired,\n  newMessageValue: PropTypes.string.isRequired,\n  onAddSubmit: PropTypes.func.isRequired,\n  onNewMessageChange: PropTypes.func.isRequired,\n};\n\nexport default ChatRoom;","import React, {Component} from 'react';\nimport style from './style.module.css';\nimport axios from \"axios\";\nimport Chatkit from \"@pusher/chatkit-client\";\nimport Spinner from \"react-spinkit\";\nimport {CHATKIT_INSTANCE_LOCATOR, DEFAULT_CHAT_USER, ENDPOINT} from '../../constants';\nimport AddToChatForm from '../AddToChatForm';\nimport ChatRoom from '../ChatRoom';\nimport {NEW_CHAT_TYPE, JOIN_CHAT_TYPE} from './constants';\n\nexport default class ChatController extends Component {\n\n  state = {\n    chatAction: null,\n    chatRoom: '',\n    userName: '',\n    isLoading: false,\n    messages: [],\n    isChatReady: false,\n    message: '',\n    loadedRooms: [],\n    roomId: null,\n  };\n\n  componentDidMount() {\n    this.setState({isLoading: true});\n    axios\n    .get(`${ENDPOINT}/posts`, { userId: 'support' })\n    .then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: `${ENDPOINT}/authenticate`\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n        userId: DEFAULT_CHAT_USER,\n        tokenProvider,\n      });\n\n      return chatManager\n        .connect()\n        .then(data => {\n          this.setState({loadedRooms: data.rooms, isLoading: false});\n        });\n    })\n    .catch(console.error);\n  }\n\n  handleChangeChatAction = chatAction => {\n    this.setState({chatAction});\n  };\n\n  handleChangeUserName = e => {\n    this.setState({userName: e.target.value});\n  };\n\n  handleChangeChatRoom = e => {\n    this.setState({chatRoom: e.target.value});\n  };\n\n  handleUpdateMessage = e => {\n    this.setState({message: e.target.value});\n  };\n\n  addSupportStaffToRoom = () => {\n    const {appData} = this.props;\n\n    return appData.user.addUserToRoom({\n      userId: DEFAULT_CHAT_USER,\n      roomId: appData.room.id,\n    });\n  };\n\n  connectToRoom = (id) => {\n    const { appData } = this.props;\n\n    return appData.user\n      .subscribeToRoom({\n        roomId: `${id}`,\n        messageLimit: 100,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          },\n        }\n      })\n      .then(currentRoom => {\n        appData.setRoom(currentRoom);\n      });\n  }\n\n  createRoom = () => {\n    const {appData} = this.props;\n  \n    appData.user\n      .createRoom({\n        name: this.state.chatRoom,\n        private: false,\n      })\n      .then(room => this.connectToRoom(room.id))\n      .then(() => this.addSupportStaffToRoom())\n      .catch(console.error);\n  };\n\n  handleSubmitNewChat = () => {\n    this.setState({isLoading: true});\n    const {userName} = this.state;\n\n    if (userName === null || userName.trim() === \"\") {\n      alert(\"Invalid userId\");\n    } else {\n      axios\n        .post(`${ENDPOINT}/users`, { userId: userName })\n        .then(() => {\n          const tokenProvider = new Chatkit.TokenProvider({\n            url: `${ENDPOINT}/authenticate`\n          });\n\n          const chatManager = new Chatkit.ChatManager({\n            instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n            userId: userName,\n            tokenProvider\n          });\n\n          return chatManager.connect().then(currentUser => {\n            this.props.appData.setUser(currentUser);\n            this.setState({isLoading: false, isChatReady: true},\n              () => this.createRoom()\n            );\n          });\n        })\n        .catch(console.error);\n    }\n  };\n\n  handleSubmitJoinChat = () => {\n    this.setState({isLoading: true});\n    const {userName} = this.state;\n\n    axios\n    .post(`${ENDPOINT}/users`, { userId: userName })\n    .then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: `${ENDPOINT}/authenticate`\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n        userId: userName,\n        tokenProvider\n      });\n\n      return chatManager\n        .connect()\n        .then(currentUser => {\n          this.props.appData.setUser(currentUser);\n          this.setState(\n            {\n              isLoading: false, isChatReady: true,\n            },\n            () => {\n              const roomName = this.state.chatRoom.trim();\n              const selectedRoom = this.state.loadedRooms.find(room => room.name === roomName);\n          \n              if (typeof selectedRoom === 'undefined') {\n                alert('Room was not found');\n                this.setState({isChatReady: false});\n                return;\n              }\n\n              this.connectToRoom(selectedRoom.id);\n            }\n          );\n        });\n    })\n    .catch(console.error);\n  };\n\n  handleSubmitMessage = (event) => {\n    event.preventDefault();\n    const { message } = this.state;\n    const {appData} = this.props;\n\n    if (message.trim() === \"\") return;\n\n    appData.user.sendMessage({\n      text: message,\n      roomId: `${appData.room.id}`\n    });\n\n    this.setState({\n      message: \"\"\n    });\n  };\n\n  render() {\n    const {chatAction, isLoading, chatRoom, messages, message, isChatReady, userName} = this.state;\n    const {appData} = this.props;\n\n    let bodyComponent = null;\n    if (isLoading) {\n      bodyComponent = <Spinner name=\"ball-triangle-path\" color=\"#f0f0f0\" />;\n    } else {\n      if (chatAction === null) {\n        bodyComponent = (\n          <>\n            <button type=\"button\" className=\"btn btn-primary\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, JOIN_CHAT_TYPE)}>\n              Join chat\n            </button>\n            <button type=\"button\" className=\"btn btn-info\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, NEW_CHAT_TYPE)}>\n              Create new chat\n            </button>\n          </>\n        )\n      } else {\n        bodyComponent = (\n          <AddToChatForm\n            onBackClick={this.handleChangeChatAction.bind(this, null)}\n            onChatroomChange={this.handleChangeChatRoom}\n            onNicknameChange={this.handleChangeUserName}\n            chatroom={chatRoom}\n            nickname={userName}\n            title={chatAction === NEW_CHAT_TYPE ? \"CREATE NEW CHAT\" : \"\u001cJOIN CHAT ROOM\"}\n            onSubmit={chatAction === NEW_CHAT_TYPE ? this.handleSubmitNewChat : this.handleSubmitJoinChat}\n            buttonLabel={chatAction === NEW_CHAT_TYPE ? '\u001cCreate' : 'Join'}\n          />\n        );\n      }\n    }\n\n    if (isChatReady) {\n      return (\n        <ChatRoom\n          title={appData.room !== null ? appData.room.name : ''}\n          messages={messages}\n          currentUserId={appData.user.id}\n          newMessageValue={message}\n          onAddSubmit={this.handleSubmitMessage}\n          onNewMessageChange={this.handleUpdateMessage}\n        />\n      )\n    }\n\n    return (\n      <div className={style.btnsWrapper}>\n        {bodyComponent}\n      </div>\n    );\n  }\n\n}","export const NEW_CHAT_TYPE = 1;\nexport const JOIN_CHAT_TYPE = 2; ","import React from 'react';\nimport {AppConsumer} from './store/store';\nimport ChatController from './components/ChatController';\n\nconst App = () => (\n  <div className=\"container\">\n    <AppConsumer>\n      {value => (\n        <ChatController appData={value} />\n      )}\n    </AppConsumer>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './store/store';\n\nconst Application = () => (\n    <AppProvider>\n        <App />\n    </AppProvider>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}