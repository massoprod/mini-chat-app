{"version":3,"sources":["store/store.js","components/ChatController/index.js","App.js","serviceWorker.js","index.js","components/ChatController/style.module.css"],"names":["AppContext","createContext","user","room","setUserName","setRoomName","AppProvider","setState","state","Provider","value","this","props","children","Component","AppConsumer","Consumer","ChatController","chatAction","userName","chatRoom","handleChangeChatAction","handleChangeUserName","e","target","handleChangeChatRoom","appData","console","log","className","style","btnsWrapper","type","width","onClick","bind","htmlFor","onChange","id","placeholder","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f8769f2b.chunk.js","sourcesContent":["import React, { createContext, Component } from 'react';\n\nconst AppContext = createContext({\n  user: null,\n  room: null,\n  setUserName: () => {},\n  setRoomName: () => {},\n});\n\nexport class AppProvider extends Component {\n  setUserName = user => {\n    this.setState({ user });\n  };\n\n  setRoomName = room => {\n    this.setState({ room })\n  };\n\n  state = {\n    user: null,\n    room: null,\n    setUserName: this.setUserName,\n    setRoomName: this.setRoomName,\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer;","import React, {Component} from 'react';\nimport style from './style.module.css'\n\nexport default class ChatController extends Component {\n\n  state = {\n    chatAction: null,\n    userName: '',\n    chatRoom: '',\n  };\n\n  handleChangeChatAction = chatAction => {\n    this.setState({chatAction});\n  };\n\n  handleChangeUserName = e => {\n    this.setState({userName: e.target.value});\n  };\n\n  handleChangeChatRoom = e => {\n    this.setState({chatRoom: e.target.value});\n  };\n\n  render() {\n    const {appData} = this.props;\n    const {chatAction} = this.state;\n    console.log('APP DATA: ', appData);\n\n    return (\n      <>\n        {chatAction === null && (\n          <div className={style.btnsWrapper}>\n              <button type=\"button\" className=\"btn btn-primary\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, 'join')}>\n                Join chat\n              </button>\n              <button type=\"button\" className=\"btn btn-info\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, 'new')}>\n                Create new chat\n              </button>\n          </div>\n        )}\n\n        {chatAction === 'new' && (\n          <div className={style.btnsWrapper}>\n            <h4>NEW CHAT</h4>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"userName\">Your name</label>\n              <input onChange={this.handleChangeUserName} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Your Name\" />\n            </div>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"chatName\">Char room name</label>\n              <input onChange={this.handleChangeChatRoom} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"chatroom\" />\n            </div>\n            <button type=\"button\" className=\"btn btn-success\" style={{width: 350}}>\n              CREATE CHAT\n            </button>\n            <button type=\"button\" className=\"btn btn-primary\" style={{width: 200, marginTop: 30}} onClick={this.handleChangeChatAction.bind(this, null)}>\n              BACK\n            </button>\n          </div>\n        )}\n\n        {chatAction === 'join' && (\n          <div className={style.btnsWrapper}>\n            <h4>JOIN CHAT</h4>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"userName\">Your name</label>\n              <input onChange={this.handleChangeUserName} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Your Name\" />\n            </div>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"chatName\">Char room name</label>\n              <input onChange={this.handleChangeChatRoom} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"chatroom\" />\n            </div>\n            <button type=\"button\" className=\"btn btn-success\" style={{width: 350}}>\n              JOIN CHAT\n            </button>\n            <button type=\"button\" className=\"btn btn-primary\" style={{width: 200, marginTop: 30}} onClick={this.handleChangeChatAction.bind(this, null)}>\n              BACK\n            </button>\n          </div>\n        )}\n      </>\n      \n    );\n  }\n\n}","import React from 'react';\nimport {AppConsumer} from './store/store';\nimport ChatController from './components/ChatController';\n\nconst App = () => (\n  <div className=\"container\">\n    <AppConsumer>\n      {value => (\n        <ChatController appData={value} />\n      )}\n    </AppConsumer>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './store/store';\n\nconst Application = () => (\n    <AppProvider>\n        <App />\n    </AppProvider>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnsWrapper\":\"style_btnsWrapper__kO5fY\"};"],"sourceRoot":""}