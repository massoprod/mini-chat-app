{"version":3,"sources":["components/ChatRoom/style.module.css","components/ChatRoom/components/Footer/style.module.css","components/ChatRoom/components/Header/style.module.css","components/ChatController/style.module.css","store/store.js","constants.js","components/KeyboardListener/constants.js","components/KeyboardListener/index.js","components/AddToChatForm/index.js","components/Message/index.js","components/ChatRoom/components/Footer/index.js","components/ChatRoom/components/Header/index.js","components/ChatRoom/index.js","components/ChatController/index.js","components/ChatController/constants.js","App.js","serviceWorker.js","index.js","components/Message/style.module.css"],"names":["module","exports","AppContext","createContext","user","room","setUser","setRoom","AppProvider","setState","state","Provider","value","this","props","children","Component","AppConsumer","Consumer","CHATKIT_INSTANCE_LOCATOR","DEFAULT_CHAT_USER","ENDPOINT","KEY_CODE_ENTER","KeyboardListener","handleKeyDown","event","onEnterPress","keyCode","document","addEventListener","removeEventListener","defaultProps","AddToChatForm","chatroom","length","nickname","onSubmit","title","className","style","width","htmlFor","onChange","onNicknameChange","type","id","placeholder","onChatroomChange","onClick","disabled","buttonLabel","marginTop","onBackClick","classes","require","Message","isMine","me","marginBottom","author","createdAt","moment","utc","local","format","message","mineMessage","Footer","sendWrapper","onMessageChange","button","Header","header","onLeaveChat","ChatRoom","lastRef","useRef","loaderWrapper","name","color","confirm","window","location","reload","chatList","messages","map","senderId","currentUserId","key","text","ref","onAddSubmit","setTimeout","current","scrollIntoView","behavior","onNewMessageChange","newMessageValue","ChatController","chatAction","chatRoom","userName","isLoading","isChatReady","loadedRooms","roomId","handleChangeChatAction","handleChangeUserName","e","target","handleChangeChatRoom","handleUpdateMessage","addSupportStaffToRoom","appData","addUserToRoom","userId","connectToRoom","subscribeToRoom","messageLimit","hooks","onMessage","then","currentRoom","createRoom","private","catch","console","error","handleSubmitNewChat","trim","alert","axios","post","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","connect","currentUser","handleSubmitJoinChat","roomName","selectedRoom","find","handleSubmitMessage","sendMessage","get","data","rooms","bodyComponent","bind","btnsWrapper","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc360e6d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderWrapper\":\"style_loaderWrapper__3q7sh\",\"chatList\":\"style_chatList__4HRbi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sendWrapper\":\"style_sendWrapper__3KliT\",\"button\":\"style_button__NeJkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"style_header__2AEAO\",\"title\":\"style_title__3JVtA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnsWrapper\":\"style_btnsWrapper__kO5fY\"};","import React, { createContext, Component } from 'react';\n\nconst AppContext = createContext({\n  user: null,\n  room: null,\n  setUser: () => {},\n  setRoom: () => {},\n});\n\nexport class AppProvider extends Component {\n  setUser = user => {\n    this.setState({ user });\n  };\n\n  setRoom = room => {\n    this.setState({ room })\n  };\n\n  state = {\n    user: null,\n    room: null,\n    setUser: this.setUser,\n    setRoom: this.setRoom,\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer;","export const CHATKIT_INSTANCE_LOCATOR = \"v1:us1:f0ecceaa-4992-4706-813f-8237028def31\";\nexport const CHATKIT_SECRET_KEY = \"c5c289b7-1bc8-4571-9da7-20c5094e98c5:mQiRKGCQ2+EUTsOoVbDFcJJ5Ln0SzFPjzGMohgfCQII=\";\nexport const DEFAULT_CHAT_USER = 'support'; \nexport const ENDPOINT = \"https://masso-mini-chat-app.herokuapp.com\"","export const KEY_CODE_ENTER = 13; ","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {KEY_CODE_ENTER} from './constants';\n\nexport default class KeyboardListener extends Component {\n\n    static propTypes = {\n        onEnterPress: PropTypes.func,\n    };\n\n    static defaultProps = {\n        onEnterPress: () => null,\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = event => {\n        const {onEnterPress} = this.props;\n        const {keyCode} = event;\n       \n        if (keyCode === KEY_CODE_ENTER) {\n            onEnterPress();\n        }\n\n        return;\n    };\n\n    render() {\n        return this.props.children;\n    }\n\n}","//TODO: inline styles to css\n// input component\n// button component\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyboardListener from '../KeyboardListener';\n\nconst AddToChatForm = ({...props}) => (\n  <KeyboardListener onEnterPress={props.chatroom.length === 0 || props.nickname.length === 0 ? () => null : props.onSubmit}>\n    <h4>{props.title}</h4>\n    <div className=\"form-group\" style={{width: 350}}>\n      <label htmlFor=\"nickname\">Nickname</label>\n      <input\n        onChange={props.onNicknameChange}\n        value={props.nickname}\n        type=\"text\"\n        className=\"form-control\"\n        id=\"nickname\"\n        placeholder=\"nickname\"\n      />\n    </div>\n    <div className=\"form-group\" style={{width: 350}}>\n      <label htmlFor=\"chatroom\">Chat room name</label>\n      <input\n        onChange={props.onChatroomChange}\n        value={props.chatroom}\n        type=\"text\"\n        className=\"form-control\"\n        id=\"chatroom\"\n        placeholder=\"chat room name\"\n      />\n    </div>\n    <button\n      type=\"button\"\n      className=\"btn btn-success\"\n      style={{width: 350}}\n      onClick={props.onSubmit}\n      disabled={props.chatroom.length === 0 || props.nickname.length === 0}\n    >\n      {props.buttonLabel}\n    </button>\n    <button\n      type=\"button\"\n      className=\"btn btn-primary\"\n      style={{width: 200, marginTop: 30}}\n      onClick={props.onBackClick}\n    >\n      BACK\n    </button>\n  </KeyboardListener>\n);\n\nAddToChatForm.propTypes = {\n  onBackClick: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChatroomChange: PropTypes.func.isRequired,\n  onNicknameChange: PropTypes.func.isRequired,\n  chatroom: PropTypes.string.isRequired,\n  nickname: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  buttonLabel: PropTypes.string.isRequired,\n};\n\nexport default AddToChatForm;","import React from 'react';\nimport style from './style.module.css';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nconst classes = require('react-style-classes');\n\nconst Message = ({...props}) => (\n  <>\n    <div className={props.isMine ? style.me : null} style={{marginBottom: 5}}>\n      <span className={style.author}>{props.author},</span>\n      <span className={style.createdAt}>{(moment.utc(props.createdAt).local().format('DD.MM.YYYY h:m A'))}</span>\n    </div>\n    <div\n      className={classes(style.message, props.isMine && style.mineMessage)}\n    >\n      {props.message}\n    </div>\n  </>\n);\n\nMessage.propTypes = {\n  isMine: PropTypes.bool.isRequired,\n  message: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n};\n\nexport default Message;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './style.module.css';\nimport KeyboardListener from '../../../KeyboardListener';\n\nconst classes = require('react-style-classes');\n\nconst Footer = ({...props}) => (\n  <KeyboardListener onEnterPress={props.value.length === null ? () => null : props.onSubmit}>\n    <div className=\"card-footer\">\n      <div className={style.sendWrapper}>\n        <input\n          placeholder=\"type your message...\"\n          className=\"form-control\"\n          onChange={props.onMessageChange}\n          value={props.value}\n        />\n        <button\n          type=\"button\"\n          className={classes(\"btn btn-success\", style.button)}\n          onClick={props.onSubmit}\n          disabled={props.value.length === 0}\n        >\n          SEND\n        </button>\n      </div>\n    </div>\n  </KeyboardListener>\n);\n\nFooter.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onMessageChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport style from './style.module.css';\n\nconst classes = require('react-style-classes');\n\nconst Header = ({...props}) => (\n  <div className={classes(\"card-header\", style.header)}>\n    <span className={style.title}>{props.title}</span>\n    <button className=\"btn btn-sm btn-danger\" onClick={props.onLeaveChat}>\n      Leave chat\n    </button>\n  </div>\n);\n\nHeader.propTypes = {\n  onLeaveChat: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","//TODO: refactor chatlist as body component\nimport React, {useRef} from 'react';\nimport style from './style.module.css';\nimport PropTypes from 'prop-types';\nimport Message from '../Message';\nimport Spinner from \"react-spinkit\";\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nconst ChatRoom = ({...props}) => {\n  const lastRef = useRef(null);\n  if (props.title.length === 0) {\n    return (\n      <div className={style.loaderWrapper}>\n        <Spinner name=\"ball-triangle-path\" color=\"#f0f0f0\" />\n      </div>\n    );\n  }\n\n  const submit = () => {\n    props.onAddSubmit();\n    if (lastRef !== null) {\n      setTimeout(() => {\n        lastRef.current.scrollIntoView({ behavior: 'smooth' });\n      }, 150);\n    }\n  };\n\n  const leaveChat = () => {\n    // eslint-disable-next-line no-restricted-globals\n    if(confirm(\"Do you really want to do this?\")) {\n      window.location.reload();\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"card text-white bg-dark mt-3\">\n      <Header\n        onLeaveChat={leaveChat}\n        title={props.title}\n      />\n      <div className=\"card-body\">\n        <div className={style.chatList}>\n          {props.messages.map(message => {\n            const isMine = message.senderId === props.currentUserId;\n\n            return (\n              <Message\n                key={message.id}\n                isMine={isMine}\n                message={message.text}\n                author={message.senderId}\n                createdAt={message.createdAt}\n              />\n            )\n          })}\n          <span ref={lastRef} />\n        </div>\n      </div>\n      <Footer\n        onSubmit={submit}\n        onMessageChange={props.onNewMessageChange}\n        value={props.newMessageValue}\n      />\n    </div>\n  );\n};\n\nChatRoom.propTypes = {\n  messages: PropTypes.array.isRequired,\n  currentUserId: PropTypes.string.isRequired,\n  newMessageValue: PropTypes.string.isRequired,\n  onAddSubmit: PropTypes.func.isRequired,\n  onNewMessageChange: PropTypes.func.isRequired,\n};\n\nexport default ChatRoom;","import React, {Component} from 'react';\nimport style from './style.module.css';\nimport PropTypes from 'prop-types';\nimport axios from \"axios\";\nimport Chatkit from \"@pusher/chatkit-client\";\nimport Spinner from \"react-spinkit\";\nimport {CHATKIT_INSTANCE_LOCATOR, DEFAULT_CHAT_USER, ENDPOINT} from '../../constants';\nimport AddToChatForm from '../AddToChatForm';\nimport ChatRoom from '../ChatRoom';\nimport {NEW_CHAT_TYPE, JOIN_CHAT_TYPE} from './constants';\n\nexport default class ChatController extends Component {\n\n  static propTypes = {\n    appData: PropTypes.object.isRequired,\n  };\n\n  state = {\n    chatAction: null,\n    chatRoom: '',\n    userName: '',\n    isLoading: false,\n    messages: [],\n    isChatReady: false,\n    message: '',\n    loadedRooms: [],\n    roomId: null,\n  };\n\n  componentDidMount() {\n    this.setState({isLoading: true});\n    axios\n      .get(`${ENDPOINT}/posts`, { userId: 'support' })\n      .then(() => {\n        const tokenProvider = new Chatkit.TokenProvider({\n          url: `${ENDPOINT}/authenticate`\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n        userId: DEFAULT_CHAT_USER,\n        tokenProvider,\n      });\n\n      return chatManager\n        .connect()\n        .then(data => {\n          this.setState({loadedRooms: data.rooms, isLoading: false});\n        });\n    })\n    .catch(console.error);\n  }\n\n  handleChangeChatAction = chatAction => {\n    this.setState({chatAction});\n  };\n\n  handleChangeUserName = e => {\n    this.setState({userName: e.target.value});\n  };\n\n  handleChangeChatRoom = e => {\n    this.setState({chatRoom: e.target.value});\n  };\n\n  handleUpdateMessage = e => {\n    this.setState({message: e.target.value});\n  };\n\n  addSupportStaffToRoom = () => {\n    const {appData} = this.props;\n\n    return appData.user.addUserToRoom({\n      userId: DEFAULT_CHAT_USER,\n      roomId: appData.room.id,\n    });\n  };\n\n  connectToRoom = (id) => {\n    const { appData } = this.props;\n\n    return appData.user\n      .subscribeToRoom({\n        roomId: `${id}`,\n        messageLimit: 100,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          },\n        }\n      })\n      .then(currentRoom => {\n        appData.setRoom(currentRoom);\n      });\n  }\n\n  createRoom = () => {\n    const {appData} = this.props;\n  \n    appData.user\n      .createRoom({\n        name: this.state.chatRoom,\n        private: false,\n      })\n      .then(room => this.connectToRoom(room.id))\n      .then(() => this.addSupportStaffToRoom())\n      .catch(console.error);\n  };\n\n  handleSubmitNewChat = () => {\n    this.setState({isLoading: true});\n    const {userName} = this.state;\n\n    if (userName === null || userName.trim() === \"\") {\n      alert(\"Invalid userId\");\n    } else {\n      axios\n        .post(`${ENDPOINT}/users`, { userId: userName })\n        .then(() => {\n          const tokenProvider = new Chatkit.TokenProvider({\n            url: `${ENDPOINT}/authenticate`\n          });\n\n          const chatManager = new Chatkit.ChatManager({\n            instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n            userId: userName,\n            tokenProvider\n          });\n\n          return chatManager.connect().then(currentUser => {\n            this.props.appData.setUser(currentUser);\n            this.setState({isLoading: false, isChatReady: true},\n              () => this.createRoom()\n            );\n          });\n        })\n        .catch(console.error);\n    }\n  };\n\n  handleSubmitJoinChat = () => {\n    this.setState({isLoading: true});\n    const {userName} = this.state;\n\n    axios\n      .post(`${ENDPOINT}/users`, { userId: userName })\n      .then(() => {\n        const tokenProvider = new Chatkit.TokenProvider({\n          url: `${ENDPOINT}/authenticate`\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n        userId: userName,\n        tokenProvider\n      });\n\n      return chatManager\n        .connect()\n        .then(currentUser => {\n          this.props.appData.setUser(currentUser);\n          this.setState(\n            {\n              isLoading: false, isChatReady: true,\n            },\n            () => {\n              const roomName = this.state.chatRoom.trim();\n              const selectedRoom = this.state.loadedRooms.find(room => room.name === roomName);\n          \n              if (typeof selectedRoom === 'undefined') {\n                alert('Room was not found');\n                this.setState({isChatReady: false});\n                return;\n              }\n\n              this.connectToRoom(selectedRoom.id);\n            }\n          );\n        });\n    })\n    .catch(console.error);\n  };\n\n  handleSubmitMessage = () => {\n    // event.preventDefault();\n    const { message } = this.state;\n    const {appData} = this.props;\n\n    if (message.trim() === \"\") return;\n\n    appData.user.sendMessage({\n      text: message,\n      roomId: `${appData.room.id}`\n    });\n\n    this.setState({\n      message: \"\"\n    });\n  };\n\n  render() {\n    const {chatAction, isLoading, chatRoom, messages, message, isChatReady, userName} = this.state;\n    const {appData} = this.props;\n\n    let bodyComponent = null;\n    if (isLoading) {\n      bodyComponent = <Spinner name=\"ball-triangle-path\" color=\"#f0f0f0\" />;\n    } else {\n      if (chatAction === null) {\n        bodyComponent = (\n          <>\n            <button type=\"button\" className=\"btn btn-primary\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, JOIN_CHAT_TYPE)}>\n              Join chat\n            </button>\n            <button type=\"button\" className=\"btn btn-info\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, NEW_CHAT_TYPE)}>\n              Create new chat\n            </button>\n          </>\n        )\n      } else {\n        bodyComponent = (\n          <AddToChatForm\n            onBackClick={this.handleChangeChatAction.bind(this, null)}\n            onChatroomChange={this.handleChangeChatRoom}\n            onNicknameChange={this.handleChangeUserName}\n            chatroom={chatRoom}\n            nickname={userName}\n            title={chatAction === NEW_CHAT_TYPE ? \"CREATE NEW CHAT\" : \"\u001cJOIN CHAT ROOM\"}\n            onSubmit={chatAction === NEW_CHAT_TYPE ? this.handleSubmitNewChat : this.handleSubmitJoinChat}\n            buttonLabel={chatAction === NEW_CHAT_TYPE ? '\u001cCreate' : 'Join'}\n          />\n        );\n      }\n    }\n\n    if (isChatReady) {\n      return (\n        <ChatRoom\n          title={appData.room !== null ? appData.room.name : ''}\n          messages={messages}\n          currentUserId={appData.user.id}\n          newMessageValue={message}\n          onAddSubmit={this.handleSubmitMessage}\n          onNewMessageChange={this.handleUpdateMessage}\n        />\n      )\n    }\n\n    return (\n      <div className={style.btnsWrapper}>\n        {bodyComponent}\n      </div>\n    );\n  }\n\n}","export const NEW_CHAT_TYPE = 1;\nexport const JOIN_CHAT_TYPE = 2; ","import React from 'react';\nimport {AppConsumer} from './store/store';\nimport ChatController from './components/ChatController';\n\nconst App = () => (\n  <div className=\"container\">\n    <AppConsumer>\n      {value => (\n        <ChatController appData={value} />\n      )}\n    </AppConsumer>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './store/store';\n\nconst Application = () => (\n  <AppProvider>\n    <App />\n  </AppProvider>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"style_message__ozSTK\",\"mineMessage\":\"style_mineMessage__2-SOA\",\"author\":\"style_author__1EyPV\",\"me\":\"style_me__1Z_j-\",\"createdAt\":\"style_createdAt__jt8Vx\"};"],"sourceRoot":""}