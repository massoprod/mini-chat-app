{"version":3,"sources":["components/ChatController/style.module.css","store/store.js","constants.js","components/ChatController/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","createContext","user","room","setUser","setRoom","AppProvider","setState","state","Provider","value","this","props","children","Component","AppConsumer","Consumer","CHATKIT_INSTANCE_LOCATOR","ChatController","chatAction","userName","chatRoom","isLoading","messages","isChatReady","message","rooms","handleChangeChatAction","handleChangeUserName","e","target","handleChangeChatRoom","handleUpdateMessage","connectToRoom","id","appData","subscribeToRoom","roomId","messageLimit","hooks","onMessage","then","currentRoom","createRoom","name","private","catch","console","error","handleSubmitNewChat","trim","alert","axios","post","userId","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","connect","currentUser","handleSubmitJoinChat","length","handleSubmitMessage","event","preventDefault","sendMessage","text","log","className","style","btnsWrapper","color","map","index","key","onChange","type","onClick","width","bind","htmlFor","placeholder","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.917cf842.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnsWrapper\":\"style_btnsWrapper__kO5fY\"};","import React, { createContext, Component } from 'react';\n\nconst AppContext = createContext({\n  user: null,\n  room: null,\n  setUser: () => {},\n  setRoom: () => {},\n});\n\nexport class AppProvider extends Component {\n  setUser = user => {\n    this.setState({ user });\n  };\n\n  setRoom = room => {\n    this.setState({ room })\n  };\n\n  state = {\n    user: null,\n    room: null,\n    setUser: this.setUser,\n    setRoom: this.setRoom,\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer;","export const CHATKIT_INSTANCE_LOCATOR = \"v1:us1:f0ecceaa-4992-4706-813f-8237028def31\";\nexport const CHATKIT_SECRET_KEY = \"c5c289b7-1bc8-4571-9da7-20c5094e98c5:mQiRKGCQ2+EUTsOoVbDFcJJ5Ln0SzFPjzGMohgfCQII=\";","import React, {Component} from 'react';\nimport style from './style.module.css';\nimport axios from \"axios\";\nimport Chatkit from \"@pusher/chatkit-client\";\nimport Spinner from \"react-spinkit\";\nimport {CHATKIT_INSTANCE_LOCATOR} from '../../constants';\n\nexport default class ChatController extends Component {\n\n  state = {\n    chatAction: null,\n    userName: '',\n    chatRoom: '',\n    isLoading: false,\n    messages: [],\n    isChatReady: false,\n    message: '',\n    rooms: [],\n  };\n\n  handleChangeChatAction = chatAction => {\n    this.setState({chatAction});\n  };\n\n  handleChangeUserName = e => {\n    this.setState({userName: e.target.value});\n  };\n\n  handleChangeChatRoom = e => {\n    this.setState({chatRoom: e.target.value});\n  };\n\n  handleUpdateMessage = e => {\n    this.setState({message: e.target.value});\n  };\n\n  connectToRoom = (id) => {\n    const { appData } = this.props;\n\n    return appData.user\n      .subscribeToRoom({\n        roomId: `${id}`,\n        messageLimit: 100,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          },\n        }\n      })\n      .then(currentRoom => {\n        appData.setRoom(currentRoom);\n      });\n  }\n\n  createRoom = () => {\n    const {appData} = this.props;\n\n    appData.user\n      .createRoom({\n        name: this.state.chatRoom,\n        private: true\n      })\n      .then(room => this.connectToRoom(room.id))\n      // .then(() => this.addSupportStaffToRoom())\n      .catch(console.error);\n  };\n\n  handleSubmitNewChat = () => {\n    this.setState({isLoading: true});\n    const {userName} = this.state;\n\n    if (userName === null || userName.trim() === \"\") {\n      alert(\"Invalid userId\");\n    } else {\n      axios\n        .post(\"http://localhost:5200/users\", { userId: userName })\n        .then(() => {\n          const tokenProvider = new Chatkit.TokenProvider({\n            url: \"http://localhost:5200/authenticate\"\n          });\n\n          const chatManager = new Chatkit.ChatManager({\n            instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n            userId: userName,\n            tokenProvider\n          });\n\n          return chatManager.connect().then(currentUser => {\n            this.props.appData.setUser(currentUser);\n            this.setState({isLoading: false, isChatReady: true},\n              () => this.createRoom()\n            );\n          });\n        })\n        .catch(console.error);\n    }\n  };\n\n  handleSubmitJoinChat = () => {\n    this.setState({isLoading: true});\n    const {userName} = this.state;\n\n    axios\n    .post(\"http://localhost:5200/users\", { userId: userName })\n    .then(() => {\n      const tokenProvider = new Chatkit.TokenProvider({\n        url: \"http://localhost:5200/authenticate\"\n      });\n\n      const chatManager = new Chatkit.ChatManager({\n        instanceLocator: CHATKIT_INSTANCE_LOCATOR,\n        userId: userName,\n        tokenProvider\n      });\n\n      return chatManager\n        .connect()\n        .then(currentUser => {\n          this.props.appData.setUser(currentUser);\n          this.setState(\n            {\n              isLoading: false, isChatReady: true,\n              rooms: this.props.appData.user.rooms,\n            },\n            () => {\n              if (this.state.rooms.length >= 1) {\n                this.connectToRoom(this.state.rooms[0].id);\n              }\n            }\n          );\n        });\n    })\n    .catch(console.error);\n  };\n\n  handleSubmitMessage = (event) => {\n    event.preventDefault();\n    const { message } = this.state;\n    const {appData} = this.props;\n\n    if (message.trim() === \"\") return;\n\n    appData.user.sendMessage({\n      text: message,\n      roomId: `${appData.room.id}`\n    });\n\n    this.setState({\n      message: \"\"\n    });\n  };\n\n  render() {\n    const {appData} = this.props;\n    const {chatAction, isLoading, userName, chatRoom, messages, message, isChatReady} = this.state;\n    console.log('APP DATA: ', appData);\n    console.log('MESSAGES:', messages);\n\n    if (isLoading) {\n      return (\n        <div className={style.btnsWrapper}>\n          <Spinner name=\"ball-triangle-path\" color=\"#f0f0f0\" />\n        </div>\n      )\n    }\n\n    if (isChatReady) {\n      return (\n        <div>\n          {messages.map((message, index) => (\n            <div key={`${message}-${index}`}>\n              {message.text}\n            </div>\n          ))}\n          <input onChange={this.handleUpdateMessage} value={message} />\n          <button type=\"button\" onClick={this.handleSubmitMessage}>\n            SUBMIT\n          </button>\n        </div>\n      )\n    }\n\n    return (\n      <>\n        {chatAction === null && (\n          <div className={style.btnsWrapper}>\n              <button type=\"button\" className=\"btn btn-primary\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, 'join')}>\n                Join chat\n              </button>\n              <button type=\"button\" className=\"btn btn-info\" style={{width: 200}} onClick={this.handleChangeChatAction.bind(this, 'new')}>\n                Create new chat\n              </button>\n          </div>\n        )}\n\n        {chatAction === 'new' && (\n          <div className={style.btnsWrapper}>\n            <h4>NEW CHAT</h4>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"userName\">Nickname</label>\n              <input onChange={this.handleChangeUserName} value={userName} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Nickname\" />\n            </div>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"chatName\">Char room name</label>\n              <input onChange={this.handleChangeChatRoom} value={chatRoom} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"chatroom\" />\n            </div>\n            <button type=\"button\" className=\"btn btn-success\" style={{width: 350}} onClick={this.handleSubmitNewChat}>\n              CREATE CHAT\n            </button>\n            <button type=\"button\" className=\"btn btn-primary\" style={{width: 200, marginTop: 30}} onClick={this.handleChangeChatAction.bind(this, null)}>\n              BACK\n            </button>\n          </div>\n        )}\n\n        {chatAction === 'join' && (\n          <div className={style.btnsWrapper}>\n            <h4>JOIN CHAT</h4>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"userName\">Nickname</label>\n              <input onChange={this.handleChangeUserName} value={userName} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Your Name\" />\n            </div>\n            <div className=\"form-group\" style={{width: 350}}>\n              <label htmlFor=\"chatName\">Char room name</label>\n              <input onChange={this.handleChangeChatRoom} value={chatRoom} type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"chatroom\" />\n            </div>\n            <button type=\"button\" className=\"btn btn-success\" style={{width: 350}} onClick={this.handleSubmitJoinChat}>\n              JOIN CHAT\n            </button>\n            <button type=\"button\" className=\"btn btn-primary\" style={{width: 200, marginTop: 30}} onClick={this.handleChangeChatAction.bind(this, null)}>\n              BACK\n            </button>\n          </div>\n        )}\n      </>\n      \n    );\n  }\n\n}","import React from 'react';\nimport {AppConsumer} from './store/store';\nimport ChatController from './components/ChatController';\n\nconst App = () => (\n  <div className=\"container\">\n    <AppConsumer>\n      {value => (\n        <ChatController appData={value} />\n      )}\n    </AppConsumer>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './store/store';\n\nconst Application = () => (\n    <AppProvider>\n        <App />\n    </AppProvider>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}